import mongoose, { Document, Schema } from 'mongoose';

export interface IPhoneNumber extends Document {
    userId: string;
    phoneNumber: string;
    provider: 'exotel' | 'twilio' | 'other';
    displayName: string;
    
    // Exotel Configuration
    exotelConfig?: {
        apiKey: string;
        apiToken: string;
        sid: string; // Exotel SID
        appId?: string;
        domain: string; // e.g., 'api.exotel.com' or 'api.in.exotel.com'
        region: string; // e.g., 'in' for India, 'us' for USA
    };
    
    // Agent linking
    linkedAgentId?: string;
    
    // Webhook URLs (generated by system)
    webhookIdentifier?: string;
    webhookUrl?: string;
    websocketUrl?: string;
    
    // Status
    status: 'active' | 'inactive' | 'error';
    lastUsed?: Date;
    
    // Metadata
    createdAt: Date;
    updatedAt: Date;
}

const PhoneNumberSchema: Schema = new Schema(
    {
        userId: {
            type: String,
            required: true,
            index: true,
        },
        phoneNumber: {
            type: String,
            required: true,
            trim: true,
        },
        provider: {
            type: String,
            enum: ['exotel', 'twilio', 'other'],
            default: 'exotel',
        },
        displayName: {
            type: String,
            required: true,
            trim: true,
        },
        exotelConfig: {
            apiKey: {
                type: String,
                required: function(this: IPhoneNumber) {
                    return this.provider === 'exotel';
                },
            },
            apiToken: {
                type: String,
                required: function(this: IPhoneNumber) {
                    return this.provider === 'exotel';
                },
            },
            sid: {
                type: String,
                required: function(this: IPhoneNumber) {
                    return this.provider === 'exotel';
                },
            },
            appId: String,
            domain: {
                type: String,
                default: 'api.in.exotel.com',
            },
            region: {
                type: String,
                default: 'in',
            },
        },
        linkedAgentId: {
            type: String,
        },
        webhookIdentifier: {
            type: String,
        },
        webhookUrl: String,
        websocketUrl: String,
        status: {
            type: String,
            enum: ['active', 'inactive', 'error'],
            default: 'active',
        },
        lastUsed: Date,
    },
    {
        timestamps: true,
    }
);

type PhoneNumberIndexOptions = Parameters<Schema<IPhoneNumber>['index']>[1];
type PhoneNumberIndexEntry = [Record<string, unknown>, PhoneNumberIndexOptions | undefined];

const INDEX_METADATA_KEY = Symbol('declaredIndexes');

const getDeclaredIndexes = (schema: Schema<IPhoneNumber>): PhoneNumberIndexEntry[] => {
    const typedSchema = schema as unknown as {
        indexes?: () => PhoneNumberIndexEntry[];
        [INDEX_METADATA_KEY]?: PhoneNumberIndexEntry[];
    };

    if (typeof typedSchema.indexes === 'function') {
        return typedSchema.indexes();
    }

    if (!typedSchema[INDEX_METADATA_KEY]) {
        typedSchema[INDEX_METADATA_KEY] = [];
    }

    return typedSchema[INDEX_METADATA_KEY] as PhoneNumberIndexEntry[];
};

const ensureIndex = (
    schema: Schema<IPhoneNumber>,
    fields: Record<string, 1 | -1>,
    options?: PhoneNumberIndexOptions,
) => {
    const normalizedFields = JSON.stringify(Object.entries(fields).sort(([a], [b]) => a.localeCompare(b)));
    const normalizedOptions = JSON.stringify(options ?? {});
    const declaredIndexes = getDeclaredIndexes(schema);

    const exists = declaredIndexes.some(([currentFields, currentOptions]) => {
        const normalizedCurrentFields = JSON.stringify(Object.entries(currentFields).sort(([a], [b]) => a.localeCompare(b)));
        const normalizedCurrentOptions = JSON.stringify(currentOptions ?? {});
        return normalizedCurrentFields === normalizedFields && normalizedCurrentOptions === normalizedOptions;
    });

    if (!exists) {
        schema.index(fields, options);
        if (typeof (schema as any).indexes !== 'function') {
            declaredIndexes.push([fields, options]);
        }
    }
};

ensureIndex(PhoneNumberSchema, { userId: 1, status: 1 });
ensureIndex(PhoneNumberSchema, { linkedAgentId: 1 });
ensureIndex(PhoneNumberSchema, { phoneNumber: 1 }, { unique: true, background: true });
ensureIndex(PhoneNumberSchema, { webhookIdentifier: 1 }, { unique: true, sparse: true });

export default mongoose.models.PhoneNumber || mongoose.model<IPhoneNumber>('PhoneNumber', PhoneNumberSchema);
